name: Test Chess Engines

on:
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      test_all:
        description: 'Test all implementations (ignore changes)'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1

jobs:
  detect-changes:
    name: Detect Changed Implementations
    runs-on: ubuntu-latest
    outputs:
      changed-implementations: ${{ steps.changes.outputs.implementations }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Detect changed implementations
        id: changes
        run: |
          echo "=== Detecting Changed Implementations ==="
          
          # Use shared change detection script
          TEST_ALL_FLAG="${{ github.event.inputs.test_all }}"
          
          RESULT=$(python3 .github/workflows/scripts/detect_changes.py \
            "${{ github.event_name }}" \
            "$TEST_ALL_FLAG" \
            "${{ github.event.pull_request.base.sha }}" \
            "${{ github.sha }}" \
            "${{ github.event.before }}")
          
          echo "Detection result: $RESULT"
          
          IMPLEMENTATIONS=$(echo "$RESULT" | python3 -c "import sys, json; print(json.load(sys.stdin)['implementations'])")
          HAS_CHANGES=$(echo "$RESULT" | python3 -c "import sys, json; print(json.load(sys.stdin)['has_changes'])")
          
          echo "implementations=$IMPLEMENTATIONS" >> $GITHUB_OUTPUT
          echo "has-changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

      - name: Generate dynamic matrix
        id: generate-matrix
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          CHANGED_IMPLEMENTATIONS="${{ steps.changes.outputs.implementations }}"
          
          if [[ "${{ steps.changes.outputs.has-changes }}" == "false" ]]; then
            echo "No implementation changes detected, skipping matrix generation"
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Generate matrix using external Python script
          MATRIX_JSON=$(python3 .github/workflows/scripts/generate_matrix.py "$CHANGED_IMPLEMENTATIONS")
          echo "Generated matrix: $MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  validation:
    name: Validate Implementation Structure
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run structure validation
        run: |
          echo "🔍 Running implementation structure validation..."
          python3 test/verify_implementations.py

  build-test:
    name: Build and Test Chess Engines
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [detect-changes, validation]
    if: needs.detect-changes.outputs.has-changes == 'true'
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get test configuration
        id: config
        run: .github/workflows/scripts/parse_test_config.sh ${{ matrix.engine }}

      - name: Build Docker image
        run: |
          cd implementations/${{ matrix.engine }}
          echo "🏗️ Building ${{ matrix.engine }} chess engine..."
          docker build -t chess-${{ matrix.engine }}-test .

      - name: Test basic commands
        run: .github/workflows/scripts/test_basic_commands.sh ${{ matrix.engine }}

      - name: Test advanced features
        if: steps.config.outputs.test_mode == 'full'
        run: .github/workflows/scripts/test_advanced_features.sh ${{ matrix.engine }} ${{ steps.config.outputs.supports_perft }} ${{ steps.config.outputs.supports_ai }}

      - name: Test demo mode
        if: steps.config.outputs.test_mode == 'demo'
        run: .github/workflows/scripts/test_demo_mode.sh ${{ matrix.engine }}

      - name: Cleanup
        if: always()
        run: .github/workflows/scripts/cleanup_docker.sh ${{ matrix.engine }}

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, validation, build-test]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "🏆 Chess Engine Test Summary"
          echo "============================"
          echo ""
          
          CHANGED_IMPLEMENTATIONS="${{ needs.detect-changes.outputs.changed-implementations }}"
          HAS_CHANGES="${{ needs.detect-changes.outputs.has-changes }}"
          
          if [[ "$HAS_CHANGES" == "false" ]]; then
            echo "🚫 No implementation changes detected in this PR"
            echo "⏭️ All tests skipped - no changes to validate"
          elif [[ "$CHANGED_IMPLEMENTATIONS" == "all" ]]; then
            echo "✅ All chess engine implementations tested"
            echo "🔍 Full validation suite completed"
          else
            echo "✅ Changed implementations tested: $CHANGED_IMPLEMENTATIONS"
            echo "🎯 Selective testing completed for modified code only"
          fi
          
          echo ""
          echo "🔧 Convention-based testing features:"
          echo "- 📋 chess.meta file configuration"
          echo "- 🔍 Structure validation via Python script"
          echo "- 🏗️ Docker build verification"
          echo "- 🧪 Adaptive functionality testing"
          echo "- 📊 Dynamic discovery from directory structure"
          echo ""
          echo "✨ Ready for merge when all checks pass!"