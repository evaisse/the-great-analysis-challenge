name: Chess Functionality Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  functionality-test:
    name: Test Chess Engine Functionality
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        engine: [rust, go, dart, typescript, kotlin, crystal, ruby, julia, haskell]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if engine exists
        id: check_engine
        run: |
          if [ -d "implementations/${{ matrix.engine }}" ] && [ -f "implementations/${{ matrix.engine }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.engine }} engine found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⏭️ ${{ matrix.engine }} engine not found, skipping"
          fi

      - name: Build ${{ matrix.engine }} chess engine
        if: steps.check_engine.outputs.exists == 'true'
        run: |
          cd implementations/${{ matrix.engine }}
          echo "🏗️ Building ${{ matrix.engine }} chess engine..."
          docker build -t chess-${{ matrix.engine }}-test .

      - name: Test basic functionality
        if: steps.check_engine.outputs.exists == 'true'
        run: |
          echo "🧪 Testing basic functionality for ${{ matrix.engine }}..."
          
          # Test 1: Help command
          echo "📋 Test 1: Help command"
          echo "help" | timeout 30s docker run --rm -i chess-${{ matrix.engine }}-test > help_output.txt || true
          if grep -i "help\|command\|available" help_output.txt; then
            echo "✅ Help command works"
          else
            echo "❌ Help command failed"
          fi
          
          # Test 2: Board display
          echo "📋 Test 2: Board display"
          echo "board" | timeout 30s docker run --rm -i chess-${{ matrix.engine }}-test > board_output.txt || true
          if grep -E "\+.*\+|[rnbqkpRNBQKP]|Turn:" board_output.txt; then
            echo "✅ Board display works"
          else
            echo "❌ Board display failed"
          fi
          
          # Test 3: FEN export
          echo "📋 Test 3: FEN export"
          echo "fen" | timeout 30s docker run --rm -i chess-${{ matrix.engine }}-test > fen_output.txt || true
          if grep "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1" fen_output.txt; then
            echo "✅ FEN export works"
          else
            echo "❌ FEN export failed"
          fi

      - name: Test move generation (Perft)
        if: steps.check_engine.outputs.exists == 'true' && matrix.engine != 'gleam' && matrix.engine != 'elm'
        run: |
          echo "🧪 Testing move generation with Perft..."
          
          # Run perft test at depth 3 (should be fast enough for CI)
          echo "perft 3" | timeout 120s docker run --rm -i chess-${{ matrix.engine }}-test > perft_output.txt || true
          
          # Check if perft completed and shows reasonable node count
          if grep -E "([0-9]+.*nodes|Depth.*[0-9]+)" perft_output.txt; then
            echo "✅ Perft test completed"
            cat perft_output.txt | grep -E "(nodes|Depth)" | head -5
          else
            echo "❌ Perft test failed or incomplete"
            echo "Output:"
            cat perft_output.txt | head -10
          fi

      - name: Test AI move generation
        if: steps.check_engine.outputs.exists == 'true' && matrix.engine != 'gleam' && matrix.engine != 'elm'
        run: |
          echo "🧪 Testing AI move generation..."
          
          # Test AI making a move
          {
            echo "ai"
            sleep 2
            echo "quit"
          } | timeout 60s docker run --rm -i chess-${{ matrix.engine }}-test > ai_output.txt || true
          
          if grep -E "(AI.*played|move|evaluation)" ai_output.txt; then
            echo "✅ AI move generation works"
            grep -E "(AI.*played|move)" ai_output.txt | head -3
          else
            echo "❌ AI move generation failed"
            echo "Output:"
            cat ai_output.txt | head -10
          fi

      - name: Test interactive commands
        if: steps.check_engine.outputs.exists == 'true' && matrix.engine != 'gleam' && matrix.engine != 'elm'
        run: |
          echo "🧪 Testing interactive commands..."
          
          # Test making a human move
          {
            echo "e2e4"
            echo "board"
            echo "moves"
            echo "quit"
          } | timeout 60s docker run --rm -i chess-${{ matrix.engine }}-test > interactive_output.txt || true
          
          if grep -E "(e4|moves|legal)" interactive_output.txt; then
            echo "✅ Interactive commands work"
          else
            echo "❌ Interactive commands failed"
            echo "Output:"
            cat interactive_output.txt | head -10
          fi

      - name: Performance benchmark
        if: steps.check_engine.outputs.exists == 'true' && matrix.engine != 'gleam' && matrix.engine != 'elm'
        run: |
          echo "🏁 Running performance benchmark for ${{ matrix.engine }}..."
          
          # Time a perft 4 test
          start_time=$(date +%s%N)
          echo "perft 4" | timeout 300s docker run --rm -i chess-${{ matrix.engine }}-test > benchmark_output.txt || true
          end_time=$(date +%s%N)
          
          duration_ms=$(( (end_time - start_time) / 1000000 ))
          
          if grep -E "([0-9]+.*nodes)" benchmark_output.txt; then
            nodes=$(grep -oE "[0-9]+" benchmark_output.txt | tail -1)
            echo "📊 Performance: ${nodes} nodes in ${duration_ms}ms"
            
            if [ $duration_ms -gt 0 ]; then
              nps=$(( nodes * 1000 / duration_ms ))
              echo "📊 Speed: ${nps} nodes per second"
            fi
          else
            echo "⚠️ Performance test incomplete or failed"
          fi

      - name: Cleanup
        if: always() && steps.check_engine.outputs.exists == 'true'
        run: |
          docker rmi chess-${{ matrix.engine }}-test || true
          rm -f *.txt

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: functionality-test
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "🏆 Chess Engine Functionality Test Summary"
          echo "========================================"
          echo ""
          echo "All chess engines have been tested for:"
          echo "✅ Basic command functionality (help, board, fen)"
          echo "✅ Move generation accuracy (perft tests)"  
          echo "✅ AI move generation capabilities"
          echo "✅ Interactive gameplay features"
          echo "✅ Performance benchmarking"
          echo ""
          echo "Check individual job results for detailed performance metrics!"