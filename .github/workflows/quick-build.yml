name: Quick Build Check

on:
  push:
    paths:
      - 'implementations/*/Dockerfile'
      - 'implementations/*/src/**'
      - 'implementations/*/lib/**'
      - 'implementations/*/bin/**'
      - 'implementations/**/*.cr'
      - 'implementations/**/*.rs'
      - 'implementations/**/*.go'
      - 'implementations/**/*.dart'
      - 'implementations/**/*.ts'
      - 'implementations/**/*.gleam'
      - 'implementations/**/*.kt'
      - 'implementations/**/*.kts'
  workflow_dispatch:

jobs:
  discover-and-build:
    name: Quick Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build all implementations using convention-based discovery
        run: |
          echo "🚀 Quick build test for all chess engines"
          echo "======================================="
          
          # Create Python script to discover implementations
          cat > discover_build.py << 'EOF'
import os
import subprocess
import sys

def discover_implementations():
    """Discover implementations from directory structure."""
    implementations = []
    impl_dir = "implementations"
    
    if not os.path.exists(impl_dir):
        print(f"❌ Implementations directory not found: {impl_dir}")
        return implementations
    
    for name in sorted(os.listdir(impl_dir)):
        impl_path = os.path.join(impl_dir, name)
        dockerfile_path = os.path.join(impl_path, "Dockerfile")
        
        if os.path.isdir(impl_path) and os.path.exists(dockerfile_path):
            implementations.append((name, impl_path))
    
    return implementations

def build_implementation(name, path):
    """Build a single implementation."""
    print(f"\n🏗️ Building {name}...")
    
    try:
        # Change to implementation directory
        original_dir = os.getcwd()
        os.chdir(path)
        
        # Build Docker image
        result = subprocess.run(
            ["docker", "build", "-t", f"chess-{name}-quick", ".", "--quiet"],
            capture_output=True,
            text=True,
            timeout=300  # 5 minutes timeout per build
        )
        
        os.chdir(original_dir)
        
        if result.returncode == 0:
            print(f"✅ {name}: Build successful")
            
            # Cleanup image
            subprocess.run(
                ["docker", "rmi", f"chess-{name}-quick"],
                capture_output=True
            )
            return True
        else:
            print(f"❌ {name}: Build failed")
            if result.stderr:
                print(f"Error: {result.stderr.strip()}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"⏰ {name}: Build timed out")
        os.chdir(original_dir)
        return False
    except Exception as e:
        print(f"💥 {name}: Build error - {e}")
        os.chdir(original_dir)
        return False

def main():
    implementations = discover_implementations()
    
    if not implementations:
        print("❌ No implementations found!")
        return 1
    
    print(f"Found {len(implementations)} implementations")
    
    success_count = 0
    total_count = len(implementations)
    
    for name, path in implementations:
        if build_implementation(name, path):
            success_count += 1
    
    print(f"\n📊 Results: {success_count}/{total_count} builds successful")
    
    if success_count == total_count:
        print("🎉 All builds passed!")
        return 0
    else:
        print("❌ Some builds failed")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
EOF
          
          # Run the discovery and build script
          python3 discover_build.py