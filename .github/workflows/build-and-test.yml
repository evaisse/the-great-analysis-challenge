name: Build and Test All Chess Engines

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      test_all:
        description: 'Test all implementations (ignore changes)'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1

jobs:
  detect-changes:
    name: Detect Changed Implementations
    runs-on: ubuntu-latest
    outputs:
      changed-implementations: ${{ steps.changes.outputs.implementations }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed implementations
        id: changes
        run: |
          # Determine if we should test all implementations
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.test_all }}" == "true" ]]; then
            echo "üîÑ Manual trigger: Testing all implementations"
            CHANGED_IMPLEMENTATIONS="all"
            HAS_CHANGES="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "üîÑ Manual trigger: Detecting changes since last commit"
            if [[ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- implementations/ || echo "")
            else
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- implementations/ || echo "")
            fi
            
            if [[ -n "$CHANGED_FILES" ]]; then
              CHANGED_IMPLEMENTATIONS=$(echo "$CHANGED_FILES" | grep -E "^implementations/[^/]+/" | cut -d'/' -f2 | sort -u | tr '\n' ' ')
              HAS_CHANGES="true"
            else
              CHANGED_IMPLEMENTATIONS=""
              HAS_CHANGES="false"
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "üîç Pull Request: Detecting changes"
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} -- implementations/ || echo "")
            
            if [[ -n "$CHANGED_FILES" ]]; then
              CHANGED_IMPLEMENTATIONS=$(echo "$CHANGED_FILES" | grep -E "^implementations/[^/]+/" | cut -d'/' -f2 | sort -u | tr '\n' ' ')
              HAS_CHANGES="true"
            else
              CHANGED_IMPLEMENTATIONS=""
              HAS_CHANGES="false"
            fi
          else
            echo "üìù Push: Detecting changes since previous commit"
            if [[ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- implementations/ || echo "")
            else
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- implementations/ || echo "")
            fi
            
            if [[ -n "$CHANGED_FILES" ]]; then
              CHANGED_IMPLEMENTATIONS=$(echo "$CHANGED_FILES" | grep -E "^implementations/[^/]+/" | cut -d'/' -f2 | sort -u | tr '\n' ' ')
              HAS_CHANGES="true"
            else
              CHANGED_IMPLEMENTATIONS=""
              HAS_CHANGES="false"
            fi
          fi
          
          echo "Changed implementations: $CHANGED_IMPLEMENTATIONS"
          echo "Has changes: $HAS_CHANGES"
          
          echo "implementations=$CHANGED_IMPLEMENTATIONS" >> $GITHUB_OUTPUT
          echo "has-changes=$HAS_CHANGES" >> $GITHUB_OUTPUT

      - name: Set up Python
        if: steps.changes.outputs.has-changes == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate dynamic matrix using Python validation
        id: generate-matrix
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          CHANGED_IMPLEMENTATIONS="${{ steps.changes.outputs.implementations }}"
          
          if [[ "${{ steps.changes.outputs.has-changes }}" == "false" ]]; then
            echo "No implementation changes detected, skipping matrix generation"
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create Python script to generate matrix from directory structure
          cat > generate_matrix.py << 'EOF'
import os
import json
import sys

def discover_implementations():
    """Discover implementations from directory structure."""
    implementations = []
    impl_dir = "implementations"
    
    if not os.path.exists(impl_dir):
        return implementations
    
    for name in os.listdir(impl_dir):
        impl_path = os.path.join(impl_dir, name)
        dockerfile_path = os.path.join(impl_path, "Dockerfile")
        
        if os.path.isdir(impl_path) and os.path.exists(dockerfile_path):
            implementations.append({
                "name": name.title(),
                "directory": impl_path,
                "dockerfile": "Dockerfile"
            })
    
    return sorted(implementations, key=lambda x: x["name"])

def filter_implementations(all_impls, changed_impls):
    """Filter implementations based on changes."""
    if changed_impls == "all":
        return all_impls
    
    changed_list = changed_impls.strip().split()
    return [impl for impl in all_impls if impl["name"].lower() in changed_list]

# Get all implementations
all_implementations = discover_implementations()
changed_implementations = sys.argv[1] if len(sys.argv) > 1 else "all"

# Filter based on changes
filtered_implementations = filter_implementations(all_implementations, changed_implementations)

# Generate matrix
matrix = {"include": filtered_implementations}
print(json.dumps(matrix))
EOF
          
          # Generate matrix using Python script
          MATRIX_JSON=$(python3 generate_matrix.py "$CHANGED_IMPLEMENTATIONS")
          echo "Generated matrix: $MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build and Test Chess Engines
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify implementation structure
        run: |
          if [ -d "${{ matrix.directory }}" ]; then
            echo "‚úÖ Directory ${{ matrix.directory }} exists"
          else
            echo "‚ùå Directory ${{ matrix.directory }} does not exist"
            exit 1
          fi
          
          if [ -f "${{ matrix.directory }}/${{ matrix.dockerfile }}" ]; then
            echo "‚úÖ Dockerfile found in ${{ matrix.directory }}"
          else
            echo "‚ùå Dockerfile not found in ${{ matrix.directory }}"
            exit 1
          fi

      - name: Build ${{ matrix.name }} Docker image
        run: |
          echo "üèóÔ∏è Building ${{ matrix.name }} chess engine..."
          cd ${{ matrix.directory }}
          
          start_time=$(date +%s)
          docker build --tag chess-$(basename ${{ matrix.directory }}) --file ${{ matrix.dockerfile }} .
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          
          echo "‚úÖ ${{ matrix.name }} build completed in ${build_time} seconds"
          
          # Get image size
          image_size=$(docker images chess-$(basename ${{ matrix.directory }}) --format "{{.Size}}")
          echo "üì¶ Image size: $image_size"

      - name: Run standard tests using Make targets
        run: |
          echo "üß™ Testing ${{ matrix.name }} chess engine using standard commands..."
          
          # Get the implementation name for docker image
          IMPL_NAME=$(basename ${{ matrix.directory }})
          
          # Standard test commands - same for all implementations
          echo "Testing basic commands..."
          echo "board" | timeout 30s docker run --rm -i chess-$IMPL_NAME || true
          echo "help" | timeout 30s docker run --rm -i chess-$IMPL_NAME || true
          echo "fen" | timeout 30s docker run --rm -i chess-$IMPL_NAME || true
          
          # Test perft if not Elm/Gleam (they have different interfaces)
          if [[ "$IMPL_NAME" != "elm" && "$IMPL_NAME" != "gleam" && "$IMPL_NAME" != "mojo" ]]; then
            echo "Running perft test..."
            echo "perft 3" | timeout 60s docker run --rm -i chess-$IMPL_NAME || true
          else
            echo "Running basic test for $IMPL_NAME..."
            timeout 30s docker run --rm chess-$IMPL_NAME || true
          fi
          
          echo "‚úÖ ${{ matrix.name }} tests completed"

      - name: Cleanup Docker image
        if: always()
        run: |
          IMPL_NAME=$(basename ${{ matrix.directory }})
          echo "üßπ Cleaning up ${{ matrix.name }} Docker image..."
          docker rmi chess-$IMPL_NAME || true

  validation:
    name: Validate Implementation Structure
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run Python validation script
        run: |
          echo "üîç Running implementation structure validation..."
          python3 test/verify_implementations.py
          
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test, validation]
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "üìä Chess Engine Build Summary"
          echo "============================"
          echo ""
          
          CHANGED_IMPLEMENTATIONS="${{ needs.detect-changes.outputs.changed-implementations }}"
          HAS_CHANGES="${{ needs.detect-changes.outputs.has-changes }}"
          
          if [[ "$HAS_CHANGES" == "false" ]]; then
            echo "üö´ No implementation changes detected"
            echo "‚è≠Ô∏è Workflow skipped - no testing required"
          elif [[ "$CHANGED_IMPLEMENTATIONS" == "all" ]]; then
            echo "‚úÖ All chess engine implementations tested using convention-based approach"
            echo "üê≥ Docker builds completed for all available languages"
            echo "üîç Implementation structure validation completed"
          else
            echo "‚úÖ Changed chess engine implementations tested using convention-based approach"
            echo "üéØ Selective testing - only changed implementations: $CHANGED_IMPLEMENTATIONS"
            echo "üê≥ Docker builds completed for changed languages only"
            echo "üîç Implementation structure validation completed"
          fi
          
          echo ""
          echo "üîß Convention-based workflow features:"
          echo "- üéØ Smart change detection for selective testing"
          echo "- üìÅ Automatic discovery from implementations/ directory structure"
          echo "- üêç Python validation script integration"
          echo "- üê≥ Standard Docker build and test commands"
          echo "- üìè Consistent testing approach across all languages"